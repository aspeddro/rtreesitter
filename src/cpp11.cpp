// Generated by cpp11: do not edit by hand
// clang-format off

#include "rtreesitter_types.h"
#include "cpp11/declarations.hpp"

// code.cpp
rts_parser parser_new(std::string language);
extern "C" SEXP _rtreesitter_parser_new(SEXP language) {
  BEGIN_CPP11
    return cpp11::as_sexp(parser_new(cpp11::as_cpp<cpp11::decay_t<std::string>>(language)));
  END_CPP11
}
// code.cpp
rts_tree parser_parse(rts_parser p, std::string code);
extern "C" SEXP _rtreesitter_parser_parse(SEXP p, SEXP code) {
  BEGIN_CPP11
    return cpp11::as_sexp(parser_parse(cpp11::as_cpp<cpp11::decay_t<rts_parser>>(p), cpp11::as_cpp<cpp11::decay_t<std::string>>(code)));
  END_CPP11
}
// code.cpp
double parser_field_id_for_name(rts_parser p, std::string name);
extern "C" SEXP _rtreesitter_parser_field_id_for_name(SEXP p, SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(parser_field_id_for_name(cpp11::as_cpp<cpp11::decay_t<rts_parser>>(p), cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// code.cpp
std::string tree_sexp(rts_tree t);
extern "C" SEXP _rtreesitter_tree_sexp(SEXP t) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_sexp(cpp11::as_cpp<cpp11::decay_t<rts_tree>>(t)));
  END_CPP11
}
// code.cpp
rts_node tree_root(rts_tree t);
extern "C" SEXP _rtreesitter_tree_root(SEXP t) {
  BEGIN_CPP11
    return cpp11::as_sexp(tree_root(cpp11::as_cpp<cpp11::decay_t<rts_tree>>(t)));
  END_CPP11
}
// code.cpp
rts_query query_new(rts_parser p, std::string source);
extern "C" SEXP _rtreesitter_query_new(SEXP p, SEXP source) {
  BEGIN_CPP11
    return cpp11::as_sexp(query_new(cpp11::as_cpp<cpp11::decay_t<rts_parser>>(p), cpp11::as_cpp<cpp11::decay_t<std::string>>(source)));
  END_CPP11
}
// code.cpp
cpp11::list query_captures(rts_query query, rts_node node);
extern "C" SEXP _rtreesitter_query_captures(SEXP query, SEXP node) {
  BEGIN_CPP11
    return cpp11::as_sexp(query_captures(cpp11::as_cpp<cpp11::decay_t<rts_query>>(query), cpp11::as_cpp<cpp11::decay_t<rts_node>>(node)));
  END_CPP11
}
// node.cpp
std::string node_sexp(rts_node n);
extern "C" SEXP _rtreesitter_node_sexp(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(node_sexp(cpp11::as_cpp<cpp11::decay_t<rts_node>>(n)));
  END_CPP11
}
// node.cpp
size_t node_get_child_count(rts_node n);
extern "C" SEXP _rtreesitter_node_get_child_count(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(node_get_child_count(cpp11::as_cpp<cpp11::decay_t<rts_node>>(n)));
  END_CPP11
}
// node.cpp
size_t node_get_named_child_count(rts_node n);
extern "C" SEXP _rtreesitter_node_get_named_child_count(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(node_get_named_child_count(cpp11::as_cpp<cpp11::decay_t<rts_node>>(n)));
  END_CPP11
}
// node.cpp
cpp11::list node_get_children(rts_node self);
extern "C" SEXP _rtreesitter_node_get_children(SEXP self) {
  BEGIN_CPP11
    return cpp11::as_sexp(node_get_children(cpp11::as_cpp<cpp11::decay_t<rts_node>>(self)));
  END_CPP11
}
// node.cpp
std::string node_get_type(rts_node n);
extern "C" SEXP _rtreesitter_node_get_type(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(node_get_type(cpp11::as_cpp<cpp11::decay_t<rts_node>>(n)));
  END_CPP11
}
// node.cpp
double node_get_start_byte(rts_node n);
extern "C" SEXP _rtreesitter_node_get_start_byte(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(node_get_start_byte(cpp11::as_cpp<cpp11::decay_t<rts_node>>(n)));
  END_CPP11
}
// node.cpp
double node_get_end_byte(rts_node n);
extern "C" SEXP _rtreesitter_node_get_end_byte(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(node_get_end_byte(cpp11::as_cpp<cpp11::decay_t<rts_node>>(n)));
  END_CPP11
}
// node.cpp
cpp11::writable::doubles node_get_start_point(rts_node n);
extern "C" SEXP _rtreesitter_node_get_start_point(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(node_get_start_point(cpp11::as_cpp<cpp11::decay_t<rts_node>>(n)));
  END_CPP11
}
// node.cpp
cpp11::writable::doubles node_get_end_point(rts_node n);
extern "C" SEXP _rtreesitter_node_get_end_point(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(node_get_end_point(cpp11::as_cpp<cpp11::decay_t<rts_node>>(n)));
  END_CPP11
}
// node.cpp
bool node_get_is_named(rts_node n);
extern "C" SEXP _rtreesitter_node_get_is_named(SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(node_get_is_named(cpp11::as_cpp<cpp11::decay_t<rts_node>>(n)));
  END_CPP11
}
// node.cpp
SEXP node_child_by_field_name(rts_node n, std::string name);
extern "C" SEXP _rtreesitter_node_child_by_field_name(SEXP n, SEXP name) {
  BEGIN_CPP11
    return cpp11::as_sexp(node_child_by_field_name(cpp11::as_cpp<cpp11::decay_t<rts_node>>(n), cpp11::as_cpp<cpp11::decay_t<std::string>>(name)));
  END_CPP11
}
// node.cpp
SEXP node_child_by_field_id(rts_node n, double id);
extern "C" SEXP _rtreesitter_node_child_by_field_id(SEXP n, SEXP id) {
  BEGIN_CPP11
    return cpp11::as_sexp(node_child_by_field_id(cpp11::as_cpp<cpp11::decay_t<rts_node>>(n), cpp11::as_cpp<cpp11::decay_t<double>>(id)));
  END_CPP11
}

extern "C" {
/* .Call calls */
extern SEXP _rtreesitter_node_child_by_field_id(SEXP, SEXP);
extern SEXP _rtreesitter_node_child_by_field_name(SEXP, SEXP);
extern SEXP _rtreesitter_node_get_child_count(SEXP);
extern SEXP _rtreesitter_node_get_children(SEXP);
extern SEXP _rtreesitter_node_get_end_byte(SEXP);
extern SEXP _rtreesitter_node_get_end_point(SEXP);
extern SEXP _rtreesitter_node_get_is_named(SEXP);
extern SEXP _rtreesitter_node_get_named_child_count(SEXP);
extern SEXP _rtreesitter_node_get_start_byte(SEXP);
extern SEXP _rtreesitter_node_get_start_point(SEXP);
extern SEXP _rtreesitter_node_get_type(SEXP);
extern SEXP _rtreesitter_node_sexp(SEXP);
extern SEXP _rtreesitter_parser_field_id_for_name(SEXP, SEXP);
extern SEXP _rtreesitter_parser_new(SEXP);
extern SEXP _rtreesitter_parser_parse(SEXP, SEXP);
extern SEXP _rtreesitter_query_captures(SEXP, SEXP);
extern SEXP _rtreesitter_query_new(SEXP, SEXP);
extern SEXP _rtreesitter_tree_root(SEXP);
extern SEXP _rtreesitter_tree_sexp(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_rtreesitter_node_child_by_field_id",     (DL_FUNC) &_rtreesitter_node_child_by_field_id,     2},
    {"_rtreesitter_node_child_by_field_name",   (DL_FUNC) &_rtreesitter_node_child_by_field_name,   2},
    {"_rtreesitter_node_get_child_count",       (DL_FUNC) &_rtreesitter_node_get_child_count,       1},
    {"_rtreesitter_node_get_children",          (DL_FUNC) &_rtreesitter_node_get_children,          1},
    {"_rtreesitter_node_get_end_byte",          (DL_FUNC) &_rtreesitter_node_get_end_byte,          1},
    {"_rtreesitter_node_get_end_point",         (DL_FUNC) &_rtreesitter_node_get_end_point,         1},
    {"_rtreesitter_node_get_is_named",          (DL_FUNC) &_rtreesitter_node_get_is_named,          1},
    {"_rtreesitter_node_get_named_child_count", (DL_FUNC) &_rtreesitter_node_get_named_child_count, 1},
    {"_rtreesitter_node_get_start_byte",        (DL_FUNC) &_rtreesitter_node_get_start_byte,        1},
    {"_rtreesitter_node_get_start_point",       (DL_FUNC) &_rtreesitter_node_get_start_point,       1},
    {"_rtreesitter_node_get_type",              (DL_FUNC) &_rtreesitter_node_get_type,              1},
    {"_rtreesitter_node_sexp",                  (DL_FUNC) &_rtreesitter_node_sexp,                  1},
    {"_rtreesitter_parser_field_id_for_name",   (DL_FUNC) &_rtreesitter_parser_field_id_for_name,   2},
    {"_rtreesitter_parser_new",                 (DL_FUNC) &_rtreesitter_parser_new,                 1},
    {"_rtreesitter_parser_parse",               (DL_FUNC) &_rtreesitter_parser_parse,               2},
    {"_rtreesitter_query_captures",             (DL_FUNC) &_rtreesitter_query_captures,             2},
    {"_rtreesitter_query_new",                  (DL_FUNC) &_rtreesitter_query_new,                  2},
    {"_rtreesitter_tree_root",                  (DL_FUNC) &_rtreesitter_tree_root,                  1},
    {"_rtreesitter_tree_sexp",                  (DL_FUNC) &_rtreesitter_tree_sexp,                  1},
    {NULL, NULL, 0}
};
}

extern "C" void R_init_rtreesitter(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
}
